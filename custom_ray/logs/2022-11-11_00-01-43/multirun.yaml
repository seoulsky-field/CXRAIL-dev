hydra:
  run:
    dir: ${log_dir}
  sweep:
    dir: ${log_dir}
    subdir: ${hydra.job.override_dirname}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - optimizer=adam,pesg
    - Dataset.verbose=False
  job:
    name: main
    chdir: null
    override_dirname: Dataset.verbose=False,optimizer=adam,pesg
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.2.0
    version_base: '1.2'
    cwd: /home/CheXpert_code/ynkng/CXRAIL-dev/custom_ray
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/CheXpert_code/ynkng/CXRAIL-dev/custom_ray/config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      ray: raytune
      model: resnet
      loss: AUCM
      optimizer: pesg
      Dataloader: Dataloader
      Dataset: CheXpert
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
ckpt_name: best_saved.pth
epochs: 1
batch_size: 8
seed: 777
num_workers: 2
num_classes: 5
log_dir: ./logs/${now:%Y-%m-%d_%H-%M-%S}
num_samples: 2
Dataset:
  root_path: /home/dataset/chexpert/
  folder_path: CheXpert-v1.0-small/
  use_frontal: true
  train_cols:
  - Cardiomegaly
  - Edema
  - Consolidation
  - Atelectasis
  - Pleural Effusion
  use_enhancement: false
  enhance_cols:
  - Cardiomegaly
  - Consolidation
  enhance_time: 1
  flip_label: false
  shuffle: true
  seed: ${seed}
  image_size: 224
  verbose: false
Dataloader:
  train:
    batch_size: ${batch_size}
    num_workers: ${num_workers}
    drop_last: true
    shuffle: true
  test:
    batch_size: ${batch_size}
    num_workers: ${num_workers}
    drop_last: false
    shuffle: false
optimizer:
  _target_: libauc.optimizers.PESG
  margin: 1.0
  epoch_decay: 0.002
  weight_decay: 1.0e-05
loss:
  _target_: libauc.losses.AUCM_MultiLabel
  num_classes: ${num_classes}
model:
  _target_: timm.create_model
  model_name: resnet50
  pretrained: true
  num_classes: ${num_classes}
ray:
  param_space:
    lr:
      _target_: ray.tune.loguniform
      lower: 0.0001
      upper: 0.1
    batch_size:
      _target_: ray.tune.choice
      categories:
      - 64
      - 128
  search_alg:
    _target_: ray.tune.search.hyperopt.HyperOptSearch
    metric: loss
    mode: min
  scheduler:
    _target_: ray.tune.schedulers.ASHAScheduler
    metric: loss
    mode: min
  reporter:
    _target_: utils.custom_reporter.TrialTerminationReporter
    parameter_columns:
    - lr
    - batch_size
    metric_columns:
    - loss
    - val_loss
    - val_score
    - current_epoch
    - progress_of_epoch
  run_config:
    _target_: ray.air.RunConfig
    local_dir: ${log_dir}
    name: test_experiment
    verbose: 2
  num_samples: ${num_samples}
